#!/bin/bash
# hAIveMind Unified Startup Script
# Starts all hAIveMind services with proper configuration

set -e

echo "üß† Starting hAIveMind Collective Intelligence Network"
echo "==================================================="

# Change to hAIveMind directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Kill any existing servers
echo "üõë Stopping any existing hAIveMind services..."
pkill -f "memory_server.py" 2>/dev/null || true
pkill -f "remote_mcp_server.py" 2>/dev/null || true  
pkill -f "sync_service.py" 2>/dev/null || true
sleep 2

# Check if Redis is running
echo "üîç Checking Redis status..."
if ! redis-cli ping >/dev/null 2>&1; then
    echo "‚ö†Ô∏è  Redis not running. Starting Redis..."
    sudo systemctl start redis-server || {
        echo "‚ùå Failed to start Redis. Please start manually: sudo systemctl start redis-server"
        exit 1
    }
fi

# Ensure Python virtual environment is available
if [ ! -d "venv" ]; then
    echo "‚ùå Virtual environment not found. Please run: python -m venv venv && venv/bin/pip install -r requirements.txt"
    exit 1
fi

PYTHON="$SCRIPT_DIR/venv/bin/python"

echo ""
echo "üöÄ Starting hAIveMind services..."

# Start Memory Server (stdio MCP)
echo "  üì° Starting Memory Server (stdio MCP)..."
nohup $PYTHON src/memory_server.py > logs/memory_server.log 2>&1 &
MEMORY_PID=$!
echo "    ‚úÖ Memory Server started (PID: $MEMORY_PID)"

# Start Remote MCP Server (HTTP/SSE) 
echo "  üåê Starting Remote MCP Server (HTTP/SSE on port 8900)..."
mkdir -p logs
nohup $PYTHON src/remote_mcp_server.py --host 0.0.0.0 --port 8900 > logs/remote_mcp_server.log 2>&1 &
REMOTE_PID=$!
echo "    ‚úÖ Remote MCP Server started (PID: $REMOTE_PID)"

# Start Sync Service
echo "  üîÑ Starting Sync Service (API on port 8899)..."
nohup $PYTHON src/sync_service.py --port 8899 > logs/sync_service.log 2>&1 &
SYNC_PID=$!
echo "    ‚úÖ Sync Service started (PID: $SYNC_PID)"

# Give services time to start
echo ""
echo "‚è≥ Waiting for services to initialize..."
sleep 5

# Verify services are running
echo ""
echo "üîç Verifying service status..."

# Check Memory Server (no HTTP endpoint, just check process)
if kill -0 $MEMORY_PID 2>/dev/null; then
    echo "  ‚úÖ Memory Server: Running (PID: $MEMORY_PID)"
else
    echo "  ‚ùå Memory Server: Failed to start"
fi

# Check Remote MCP Server
if curl -s http://localhost:8900/health >/dev/null 2>&1; then
    echo "  ‚úÖ Remote MCP Server: Running on http://localhost:8900"
else
    echo "  ‚ùå Remote MCP Server: Not responding on port 8900"
fi

# Check Sync Service  
if curl -s http://localhost:8899/api/status >/dev/null 2>&1; then
    echo "  ‚úÖ Sync Service: Running on http://localhost:8899"
else
    echo "  ‚ùå Sync Service: Not responding on port 8899"
fi

echo ""
echo "üéâ hAIveMind Startup Complete!"
echo ""
echo "üìã Service Information:"
echo "  ‚Ä¢ Memory Server (stdio MCP): Ready for local Claude Code connections"
echo "  ‚Ä¢ Remote MCP Server: http://lance-dev:8900 (for remote agents)"
echo "  ‚Ä¢ Sync Service API: http://lance-dev:8899 (for machine-to-machine sync)"
echo "  ‚Ä¢ Admin Interface: http://lance-dev:8900/admin (login: admin/Unit221B)"
echo ""
echo "üîß Connection Commands:"
echo "  ‚Ä¢ Local Claude Code: Already configured via .mcp.json"
echo "  ‚Ä¢ Remote Claude Code: claude mcp add --transport sse haivemind http://lance-dev:8900/sse"
echo "  ‚Ä¢ Install commands: run install_agent_commands or /hv-install"
echo ""
echo "üìä Monitor Services:"
echo "  ‚Ä¢ Memory Server logs: tail -f logs/memory_server.log"
echo "  ‚Ä¢ Remote MCP logs: tail -f logs/remote_mcp_server.log" 
echo "  ‚Ä¢ Sync Service logs: tail -f logs/sync_service.log"
echo ""
echo "üß† Welcome to the hAIveMind collective intelligence network!"
echo ""
echo "PIDs: Memory=$MEMORY_PID, Remote=$REMOTE_PID, Sync=$SYNC_PID"