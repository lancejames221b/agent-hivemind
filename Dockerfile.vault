# Multi-stage build for hAIveMind Enterprise Credential Vault
FROM python:3.11-slim as builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION=1.0.0
ARG VCS_REF

# Add metadata
LABEL maintainer="Lance James <lance@unit221b.com>" \
      org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.name="hAIveMind Enterprise Credential Vault" \
      org.label-schema.description="Secure, enterprise-grade credential management with hAIveMind integration" \
      org.label-schema.url="https://haivemind.com" \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.vcs-url="https://github.com/unit221b/haivemind-vault" \
      org.label-schema.vendor="Unit 221B, Inc" \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0"

# Install system dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    libpq-dev \
    libcurl4-openssl-dev \
    pkg-config \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Copy requirements and install Python dependencies
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r /tmp/requirements.txt

# Production stage
FROM python:3.11-slim as production

# Set environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PATH="/opt/venv/bin:$PATH" \
    VAULT_CONFIG_PATH="/app/config" \
    VAULT_LOG_PATH="/var/log/vault"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    postgresql-client \
    redis-tools \
    openssl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Create application user
RUN groupadd -r vault && useradd -r -g vault -d /app -s /bin/bash vault

# Copy virtual environment from builder
COPY --from=builder /opt/venv /opt/venv

# Create necessary directories
RUN mkdir -p /app/config /app/ssl /var/log/vault /var/backups/vault && \
    chown -R vault:vault /app /var/log/vault /var/backups/vault

# Copy application code
COPY --chown=vault:vault src/ /app/src/
COPY --chown=vault:vault config/ /app/config/
COPY --chown=vault:vault scripts/ /app/scripts/

# Copy startup script
COPY --chown=vault:vault docker/vault-entrypoint.sh /app/entrypoint.sh
RUN chmod +x /app/entrypoint.sh

# Switch to application user
USER vault
WORKDIR /app

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Expose ports
EXPOSE 8080 9090

# Set entrypoint
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["api-server"]